<?php

/**
 * @package Plugin Loader
 * @link https://github.com/dragomano/Plugin-Loader
 * @author Bugo <bugo@dragomano.ru>
 * @copyright 2023-2025 Bugo
 * @license https://opensource.org/licenses/BSD-3-Clause The 3-Clause BSD License
 */

namespace Bugo\PluginLoader;

use Bugo\PluginLoader\Attributes\Hook;
use SimpleXMLElement;
use ZipArchive;

use function array_filter;
use function basename;
use function count;
use function explode;
use function file_get_contents;
use function file_put_contents;
use function gettype;
use function glob;
use function implode;
use function in_array;
use function ini_get;
use function is_array;
use function is_file;
use function parse_ini_file;
use function preg_replace;
use function simplexml_load_string;
use function sort;
use function sprintf;
use function strval;

if (! defined('SMF'))
	die('No direct access...');

/**
 * Generated by Simple Mod Maker
 */
final class Integration
{
	use HasInvoke;

	private string $sourcedir;

	private array $context;

	private array $smcFunc;

	private ?array $txt;

	private string $plugins;

	public function __construct()
	{
		$this->sourcedir = $GLOBALS['sourcedir'];

		foreach (['context', 'smcFunc', 'txt', 'plugins'] as $f) {
			$this->{$f} = &$GLOBALS[$f];
		}
	}

	#[Hook('integrate_update_settings_file')]
	public function updateSettingsFile(array &$settings_defs): void
	{
		$settings_defs['plugins'] = [
			'text' => implode("\n", [
				'/**',
				' * Enabled plugins',
				' *',
				' * @var string',
				' */',
			]),
			'default' => '',
			'type' => 'string'
		];
	}

	#[Hook('integrate_admin_areas')]
	public function adminAreas(array &$admin_areas): void
	{
		loadLanguage('PluginLoader/');

		$admin_areas['forum']['areas']['plugins'] = [
			'label'       => $this->txt['pl_title'],
			'function'    => [$this, 'main'],
			'permission'  => ['admin_forum'],
			'icon'        => 'modifications',
			'subsections' => [
				'browse' => [$this->txt['pl_browse']],
				'upload' => [$this->txt['pl_upload']],
			],
		];
	}

	public function main(): void
	{
		$subActions = [
			'browse' => [$this, 'browseList'],
			'upload' => [$this, 'uploadArea'],
		];

		$this->context[$this->context['admin_menu_name']]['tab_data'] = [
			'title' => $this->txt['pl_title'],
			'tabs' => [
				'browse' => [
					'description' => $this->txt['pl_browse_desc'],
				],
				'upload' => [
					'description' => $this->txt['pl_upload_desc'],
				]
			]
		];

		require_once $this->sourcedir . '/ManageSettings.php';

		loadGeneralSettingParameters($subActions, 'browse');

		call_helper($subActions[$this->context['sub_action']]);
	}

	public function browseList(): void
	{
		$this->context['page_title'] = $this->txt['pl_title'];

		$this->preparePluginList();

		loadCSSFile('plugin_loader.css');

		loadJavaScriptFile('plugin_loader.js', ['minimize' => true]);

		loadTemplate('PluginLoader');

		$this->context['sub_template'] = 'main';

		$this->handleSave();
		$this->handleToggle();
		$this->handleRemove();
	}

	public function uploadArea(): void
	{
		loadLanguage('Packages');

		loadCSSFile('plugin_loader.css');

		loadTemplate('PluginLoader');

		$this->context['page_title'] = $this->txt['pl_title'] . ' - ' . $this->txt['pl_upload'];

		$this->context['max_file_size'] = memoryReturnBytes(ini_get('upload_max_filesize'));

		$this->context['upload_success'] = $this->extractPackage() ? $this->txt['download_success'] : false;

		$this->context['sub_template'] = 'upload';
	}

	private function preparePluginList(): void
	{
		$this->context['pl_plugins'] = [];

		$this->context['pl_enabled_plugins'] = empty($this->plugins) ? [] : explode(',', $this->plugins);

		$plugins = glob(PLUGINS_DIR . '/**/plugin-info.xml', GLOB_BRACE);

		foreach ($plugins as $plugin) {
			if (is_file($plugin)) {
				$id = basename(dirname($plugin));
				$content = file_get_contents($plugin);

				if (empty($content)) {
					$this->context['pl_plugins'][$id] = false;
					continue;
				}

				$content = preg_replace('~\s*<(!DOCTYPE|xsl)[^>]+?>\s*~i', '', $content);
				$xmldata = simplexml_load_string($content);

				$this->context['pl_plugins'][$id] = $this->escapeArray($this->xmlToArray($xmldata));
				$this->prepareSettings($id);
			}
		}
	}

	private function handleSave(): void
	{
		if (! isset($_REQUEST['save']) || empty($_REQUEST['plugin_name']))
			return;

		checkSession();

		$plugin_name = $_REQUEST['plugin_name'];
		$plugin_options = [];

		foreach ($this->context['pl_plugins'][$plugin_name]['settings'] as $var => $data) {
			if (isset($_REQUEST[$var])) {
				if ($data['type'] === 'check') {
					$plugin_options[$var] = (bool) $_REQUEST[$var];
				} elseif ($data['type'] ==='int') {
					$plugin_options[$var] = (int) $_REQUEST[$var];
				} else {
					$plugin_options[$var] = (string) $_REQUEST[$var];
				}
			}
		}

		$this->saveSettings($plugin_name, $plugin_options);
	}

	private function handleToggle(): void
	{
		if (! isset($_REQUEST['toggle']))
			return;

		$input = file_get_contents('php://input');
		$data  = smf_json_decode($input, true) ?? [];

		if (empty($data) || empty($data['status']) || empty($data['plugin'])) {
			redirectexit('action=admin;area=plugins');
		}

		if ($data['status'] === 'on') {
			$this->context['pl_enabled_plugins'] = array_filter(
				$this->context['pl_enabled_plugins'],
				function ($item) use ($data) {
					return $item !== $data['plugin'];
				}
			);
		} else {
			if (! empty($this->context['pl_plugins'][$data['plugin']]['database'])) {
				db_extend('packages');

				require implode('', [
					PLUGINS_DIR,
					DIRECTORY_SEPARATOR,
					$data['plugin'],
					DIRECTORY_SEPARATOR,
					$this->context['pl_plugins'][$data['plugin']]['database']
				]);
			}

			$this->context['pl_enabled_plugins'][] = $data['plugin'];
		}

		sort($this->context['pl_enabled_plugins']);

		require_once $this->sourcedir . '/Subs-Admin.php';

		updateSettingsFile(['plugins' => implode(',', $this->context['pl_enabled_plugins'])]);
	}

	private function handleRemove(): void
	{
		if (! isset($_REQUEST['remove']))
			return;

		$input = file_get_contents('php://input');
		$data  = smf_json_decode($input, true) ?? [];

		if ($data === [] || empty($data['plugin'])) {
			redirectexit('action=admin;area=plugins');
		}

		require_once $this->sourcedir . '/Subs-Package.php';

		deltree(PLUGINS_DIR . DIRECTORY_SEPARATOR . $data['plugin']);
	}

	private function prepareSettings(string $id): void
	{
		if (empty($this->context['pl_plugins'][$id]['settings']))
			return;

		$settings  = $this->getSettings(PLUGINS_DIR . DIRECTORY_SEPARATOR . $id);
		$languages = $this->getLanguages($id);

		$options = [];
		if (isset($this->context['pl_plugins'][$id]['settings']['setting']['@attributes'])) {
			$option = $this->context['pl_plugins'][$id]['settings']['setting']['@attributes'];
			$options[$option['name']] = [
				'name'  => $languages[$option['name']] ?? $this->txt['not_applicable'],
				'type'  => $option['type'],
				'value' => $settings[$option['name']] ?? $option['default'],
			];
		} else {
			foreach ($this->context['pl_plugins'][$id]['settings']['setting'] as $setting) {
				$option = $setting['@attributes'];
				$options[$option['name']] = [
					'name'  => $languages[$option['name']] ?? $this->txt['not_applicable'],
					'type'  => $option['type'],
					'value' => $settings[$option['name']] ?? $option['default'],
				];
			}
		}

		$this->context['pl_plugins'][$id]['settings'] = $options;
	}

	private function getSettings(string $path): array
	{
		return is_file($path . '/settings.ini') ? parse_ini_file($path . '/settings.ini') : [];
	}

	private function saveSettings(string $plugin, array $settings = []): void
	{
		if ($settings === [])
			return;

		$iniString = '';
		foreach ($settings as $key => $value) {
			if (in_array(gettype($value), ['boolean', 'integer'])) {
				$iniString .= "$key = $value\n";
			} else {
				$iniString .= "$key = \"$value\"\n";
			}
		}

		file_put_contents(PLUGINS_DIR . DIRECTORY_SEPARATOR . $plugin . '/settings.ini', $iniString);
	}

	private function getLanguages(string $id): array
	{
		$path = PLUGINS_DIR . DIRECTORY_SEPARATOR . $id . '/languages/';

		$langFile = is_file($path . $this->context['user']['language'] . '.php')
			? $path . $this->context['user']['language'] . '.php'
			: 'english.php';

		return require_once $langFile;
	}

	private function escapeArray(array $data): array
	{
		foreach ($data as $key => $value) {
			$data[$key] = is_array($value)
				? $this->escapeArray($value)
				: $this->smcFunc['htmlspecialchars']($value, ENT_QUOTES);
		}

		return $data;
	}

	private function xmlToArray(SimpleXMLElement $xml): array
	{
		$parser = function (SimpleXMLElement $xml, array $collection = []) use (&$parser) {
			$nodes = $xml->children();
			$attributes = $xml->attributes();

			if (0 !== count($attributes)) {
				foreach ($attributes as $attrName => $attrValue) {
					$collection['@attributes'][$attrName] = strval($attrValue);
				}
			}

			if (0 === $nodes->count()) {
				if ($xml->attributes()) {
					$collection['value'] = strval($xml);
				} else {
					$collection = strval($xml);
				}

				return $collection;
			}

			foreach ($nodes as $nodeName => $nodeValue) {
				if (count($nodeValue->xpath('../' . $nodeName)) < 2) {
					$collection[$nodeName] = $parser($nodeValue);
					continue;
				}

				$collection[$nodeName][] = $parser($nodeValue);
			}

			return $collection;
		};

		return $parser($xml);
	}

	private function extractPackage(): bool
	{
		if (! isset($_REQUEST['get']))
			return false;

		$package = $_FILES['package'];

		if ($package['error'] !== UPLOAD_ERR_OK) {
			$errorMessages = [
				UPLOAD_ERR_PARTIAL    => sprintf($this->txt['pl_upload_error_partial'], $package['name']),
				UPLOAD_ERR_INI_SIZE   => sprintf($this->txt['pl_upload_error_ini_size'], $package['name']),
				UPLOAD_ERR_CANT_WRITE => sprintf($this->txt['pl_upload_error_cant_write'], $package['name']),
				UPLOAD_ERR_FORM_SIZE  => sprintf(
					$this->txt['pl_upload_error_size'], $this->context['max_file_size'] / 1024 / 1024
				),
				UPLOAD_ERR_NO_FILE    => $this->txt['pl_upload_error_upload_no_file'],
				UPLOAD_ERR_EXTENSION  => $this->txt['pl_upload_error_upload_extension'],
				UPLOAD_ERR_NO_TMP_DIR => $this->txt['pl_upload_error_upload_no_tmp_dir'],
			];

			$this->context['upload_error'] = $errorMessages[$package['error']] ?? $this->txt['pl_upload_error_unknown'];

			return false;
		}

		switch ($package['type']) {
			case 'application/zip':
			case 'application/x-zip':
			case 'application/x-zip-compressed':
				break;

			default:
				$this->context['upload_error'] = $this->txt['pl_upload_wrong_file'];
				return false;
		}

		$zip = new ZipArchive();
		$result = $zip->open($package['tmp_name']);

		if ($result === true) {
			$plugin = pathinfo($package['name'], PATHINFO_FILENAME);

			if ($zip->locateName($plugin . '/plugin-info.xml') !== false) {
				return $zip->extractTo(PLUGINS_DIR);
			} elseif ($zip->locateName('plugin-info.xml') !== false) {
				return $zip->extractTo(PLUGINS_DIR . DIRECTORY_SEPARATOR . $plugin);
			}

			$this->context['upload_error'] = $this->txt['pl_upload_wrong_file'];
		} else {
			$this->context['upload_error'] = sprintf($this->txt['pl_upload_failed'], $result);
		}

		return false;
	}
}
