<?php /** @noinspection PhpComposerExtensionStubsInspection */

/**
 * Integration.php
 *
 * @package Plugin Loader
 * @link https://github.com/dragomano/Plugin-Loader
 * @author Bugo <bugo@dragomano.ru>
 * @copyright 2023 Bugo
 * @license https://opensource.org/licenses/BSD-3-Clause The 3-Clause BSD License
 *
 * @version 0.2
 */

namespace Bugo\PluginLoader;

use SimpleXMLElement;

if (!defined('SMF'))
	die('No direct access...');

/**
 * Generated by SimpleModMaker
 */
class Integration
{
	public function hooks()
	{
		add_integration_function('integrate_update_settings_file', __CLASS__ . '::updateSettingsFile#', false, __FILE__);
		add_integration_function('integrate_admin_areas', __CLASS__ . '::adminAreas#', false, __FILE__);
	}

	public function updateSettingsFile(array &$settings_defs)
	{
		$settings_defs['plugins'] = [
			'text' => implode("\n", [
				'/**',
				' * Enabled plugins',
				' *',
				' * @var string',
				' */',
			]),
			'default' => '',
			'type' => 'string'
		];
	}

	public function adminAreas(array &$admin_areas)
	{
		global $txt;

		loadLanguage('PluginLoader/');

		$admin_areas['forum']['areas']['plugins'] = [
			'label'       => $txt['pl_plugin_manager'],
			'function'    => [$this, 'browseList'],
			'permission'  => ['admin_forum'],
			'icon'        => 'modifications',
			'subsections' => [],
		];
	}

	public function browseList()
	{
		global $context, $txt, $sourcedir;

		$context['page_title'] = $txt['pl_plugin_manager'];

		loadCSSFile('plugin_loader.css');
		loadJavaScriptFile('plugin_loader.js', ['minimize' => true]);

		loadTemplate('PluginLoader');

		$this->preparePluginList();

		if (isset($_REQUEST['toggle']))
		{
			$input = file_get_contents('php://input');
			$data  = smf_json_decode($input, true) ?? [];

			if (empty($data))
				redirectexit('action=admin;area=plugins');

			if ($data['status'] === 'on')
				$context['pl_enabled_plugins'] = array_filter($context['pl_enabled_plugins'], function ($item) use ($data) {
					return $item !== $data['plugin'];
				});
			else
				$context['pl_enabled_plugins'][] = $data['plugin'];

			sort($context['pl_enabled_plugins']);

			require_once $sourcedir . '/Subs-Admin.php';

			updateSettingsFile(['plugins' => implode(',', $context['pl_enabled_plugins'])]);
		}
	}

	public function preparePluginList()
	{
		global $context, $plugins;

		$context['pl_enabled_plugins'] = empty($plugins) ? [] : explode(',', $plugins);
		$context['pl_plugins'] = [];

		$plugins = glob(PLUGINS_DIR . '/**/plugin-info.xml', GLOB_BRACE);

		foreach ($plugins as $plugin)
		{
			if (is_file($plugin))
			{
				$id = basename(dirname($plugin));
				$content = file_get_contents($plugin);

				if (empty($content))
				{
					$context['pl_plugins'][$id] = false;
					continue;
				}

				$content = preg_replace('~\s*<(!DOCTYPE|xsl)[^>]+?>\s*~i', '', $content);
				$xmldata = simplexml_load_string($content);
				$context['pl_plugins'][$id] = $this->escapeArray($this->xml2array($xmldata));
			}
		}
	}

	private function xml2array(SimpleXMLElement $xml): array
	{
		$parser = function (SimpleXMLElement $xml, array $collection = []) use (&$parser) {
			$nodes = $xml->children();
			$attributes = $xml->attributes();

			if (0 !== count($attributes))
			{
				foreach ($attributes as $attrName => $attrValue)
					$collection['@attributes'][$attrName] = strval($attrValue);
			}

			if (0 === $nodes->count())
			{
				if ($xml->attributes())
					$collection['value'] = strval($xml);
				else
					$collection = strval($xml);

				return $collection;
			}

			foreach ($nodes as $nodeName => $nodeValue)
			{
				if (count($nodeValue->xpath('../' . $nodeName)) < 2)
				{
					$collection[$nodeName] = $parser($nodeValue);
					continue;
				}

				$collection[$nodeName][] = $parser($nodeValue);
			}

			return $collection;
		};

		return $parser($xml);
	}

	private function escapeArray(array $data): array
	{
		global $smcFunc;

		foreach ($data as $key => $value)
		{
			if (is_array($value))
				$data[$key] = $this->escapeArray($value);
			else
				$data[$key] = $smcFunc['htmlspecialchars']($value, ENT_QUOTES);
		}

		return $data;
	}
}
